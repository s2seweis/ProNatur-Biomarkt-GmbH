***Windows Forms versus WPF           

1. Windows Forms
Windows Forms ist die ältere der beiden Technologien und wurde mit .NET eingeführt. Es bietet eine einfache, schnelle Möglichkeit zur Erstellung von Desktop-Anwendungen, hat jedoch einige Einschränkungen, insbesondere bei modernen, anspruchsvollen Benutzeroberflächen.

=> Erst Windows Form für die Grundlagen, danach PWF

2. WPF (Windows Presentation Foundation)
WPF ist eine neuere Technologie, die mit .NET Framework 3.0 eingeführt wurde. Sie ist auf die Entwicklung moderner, flexibler und grafisch ansprechender Benutzeroberflächen ausgerichtet. WPF verwendet eine deklarative Sprache (XAML) zur Gestaltung der UI und bietet viele fortschrittliche Funktionen.

In WPF wird statt HTML das XAML (eXtensible Application Markup Language) verwendet. XAML ist eine deklarative Markup-Sprache, die ähnlich wie HTML zur Beschreibung der Benutzeroberfläche dient. Sie wird verwendet, um das Layout, die Steuerungselemente und andere visuelle Aspekte der Anwendung zu definieren, ähnlich wie HTML das Layout einer Webseite beschreibt.

***Kommentar:***

Oberste Anwendungsschicht/ Window
Eigenschaftsfenster:
Start Position: CenterScreen
Text: Pronatur-Biomarkt GmbH

// Normalerweise immer den CamelCase

// Windows hat sich entschieden, die Standard Notierung zu verändern, wenn es um die Events aus de UI geht
// Hinweis: Extras => Optionen => Windows Form-Designer => Große Anfangsbuchstaben für Ereignishandler und Methoden => False to True, zum deaktivieren

=>In Windows Forms alle Elemente können Events haben
=>Du kannst alle Elemente im Code über den Namen ansprechen

***Git (Versionskontrolle)***

Wenn man einen Fehler in seinen Code gepackt hat und dadurch die Anwendung nicht mehr läuft, 
kann man mit der Versionskontrolle zu einem früheren Zeitpunkt deines Codes zurück springen

#Code Revision?

Eine Code-Revision mit Git bezieht sich auf den Prozess der Überprüfung und Bearbeitung von Codeänderungen, die in einem Git-Repository gespeichert sind. Dieser Prozess umfasst mehrere Schritte und Konzepte:

1. Versionierung
Git ermöglicht es, verschiedene Versionen eines Projekts zu speichern. Jede Änderung, die du am Code vornimmst und committest, wird als Revision betrachtet. Dies bedeutet, dass du jederzeit zu früheren Versionen zurückkehren kannst, falls nötig.

2. Commit
Ein Commit in Git ist ein Schnappschuss des aktuellen Zustands des Repositories zu einem bestimmten Zeitpunkt. Jeder Commit enthält:

Eine eindeutige ID (SHA-Hash)
Die commit-Nachricht, die beschreibt, was geändert wurde
Informationen über die Authoren und den Zeitstempel
3. Branching
Mit Git kannst du Branches erstellen, um verschiedene Entwicklungsstränge zu verwalten. Zum Beispiel kannst du einen Branch für neue Features oder Bugfixes erstellen. Dies ermöglicht parallele Entwicklungen, ohne den Hauptentwicklungsstrang (häufig als main oder master bezeichnet) zu stören.

4. Merge und Pull Requests
Um Änderungen von einem Branch in einen anderen zu integrieren, wird der Merge-Prozess verwendet. Bei der Arbeit in Teams ist es üblich, Pull Requests (oder Merge Requests) zu erstellen. Das ist ein formeller Prozess, bei dem Teammitglieder die Änderungen überprüfen und diskutieren können, bevor sie in den Hauptbranch integriert werden.

5. Code Review
Eine Code-Revision beinhaltet oft eine formelle Überprüfung des Codes durch andere Entwickler. Diese Reviews helfen, Fehler zu finden, die Codequalität zu verbessern und sicherzustellen, dass die Änderungen den Standards des Projekts entsprechen.

6. Revisionskontrolle
Git ermöglicht es dir, die gesamte Historie der Änderungen im Projekt zu verfolgen. Du kannst:

Die Änderungen zwischen verschiedenen Commits vergleichen (git diff)
Die Historie der Commits anzeigen (git log)
Änderungen zurücksetzen oder ändern (git revert, git reset)
Zusammenfassung
Eine Code-Revision mit Git ist also der gesamte Prozess der Verwaltung und Überprüfung von Codeänderungen, einschließlich der Erstellung von Commits, der Arbeit mit Branches, der Durchführung von Merges und der Durchführung von Code-Reviews. Dieser Prozess hilft, die Qualität des Codes zu gewährleisten und ermöglicht eine effiziente Zusammenarbeit im Team. 

Here’s a structured and clearer presentation of the Git commands and workflow you provided:

---

## Git Befehle

### 1. **Branch-Verwaltung**

- **Alle Branches anzeigen:**
  ```bash
  git branch
  ```

- **Neuen Branch erstellen:**
  ```bash
  git branch <branch name>
  ```

- **Zu einem Branch wechseln:**
  ```bash
  git checkout <branch name>
  ```

### 2. **Änderungen auf den Remote-Server übertragen**

Wenn der Branch nur lokal existiert, um Ihre Änderungen von dem lokalen Branch auf das Remote-Repository zu pushen:
```bash
git push --set-upstream origin <branch name>
```

### 3. **Zusammenführen des Guest-Branches in den Master-Branch**

#### Schritte zum Mergen:

1. **Zurück zum Master-Branch wechseln:**
   ```bash
   git checkout master
   ```

2. **Master-Branch aktualisieren:**
   ```bash
   git pull origin master
   ```

3. **Guest-Branch in den Master-Branch mergen:**
   ```bash
   git merge guest
   ```

4. **Änderungen zum Remote-Repository pushen:**
   ```bash
   git push origin master
   ```

### 4. **Hinweis zum Mergen**

Wenn Sie den Guest-Branch in den Master-Branch mergen, werden die Änderungen, die im Guest-Branch vorgenommen wurden, in Ihren lokalen Master-Branch integriert. Diese Änderungen sind jedoch nur in Ihrem lokalen Repository sichtbar, bis Sie sie auf das Remote-Repository pushen.

---

This structured format breaks down the commands into clear sections, making it easier to understand and follow the workflow. Let me know if you need any further adjustments!

Um über die Konsole eine ältere Version (einen älteren Commit) in Git wiederherzustellen, gibt es verschiedene Methoden, abhängig davon, ob du nur die Dateien zurücksetzen oder auch den Verlauf ändern möchtest. Hier sind die gängigsten Methoden:

### 1. **Checkout eines älteren Commits** 

Wenn du nur die Dateien im Arbeitsverzeichnis auf den Zustand eines älteren Commits zurücksetzen möchtest, ohne den Verlauf zu ändern:

1. **Finde die Commit-ID**:
   Verwende den Befehl, um die Commit-Historie anzuzeigen und die Commit-ID des gewünschten älteren Commits zu finden:
   ```bash
   git log --oneline
   ```

2. **Checkout des älteren Commits**:
   Verwende die Commit-ID, um zu diesem Commit zu wechseln:
   ```bash
   git checkout <commit-id>
   ```

   *Hinweis*: Dies versetzt dich in einen "Detached HEAD"-Zustand. Das bedeutet, dass du nicht auf einem Branch bist und Änderungen, die du in diesem Zustand vornimmst, nicht automatisch einem Branch zugeordnet werden.

### 2. **Zurücksetzen des Branches auf einen älteren Commit**

Wenn du den aktuellen Branch auf einen bestimmten Commit zurücksetzen und die Änderungen nach diesem Commit verwerfen möchtest:

1. **Finde die Commit-ID** (wie oben beschrieben).

2. **Setze den Branch zurück**:
   ```bash
   git reset --hard <commit-id>
   ```

   *Achtung*: Dies verwirft alle Änderungen, die nach diesem Commit gemacht wurden, und kann nicht rückgängig gemacht werden, wenn die Änderungen nicht vorher gesichert wurden.

### 3. **Revert eines Commits**

Wenn du einen bestimmten Commit rückgängig machen und die Änderungen beibehalten möchtest (d.h. einen neuen Commit erstellen, der die Änderungen des älteren Commits aufhebt):

1. **Finde die Commit-ID**.

2. **Führe den Revert-Befehl aus**:
   ```bash
   git revert <commit-id>
   ```

   Dies erstellt einen neuen Commit, der die Änderungen des angegebenen Commits rückgängig macht.

### Zusammenfassung

- **`git checkout <commit-id>`**: Wechselt zu einem älteren Commit, ohne den Verlauf zu ändern (Detached HEAD).
- **`git reset --hard <commit-id>`**: Setzt den aktuellen Branch auf einen älteren Commit zurück und verwirft alle Änderungen nach diesem Commit.
- **`git revert <commit-id>`**: Erstellt einen neuen Commit, der die Änderungen eines spezifischen Commits rückgängig macht.

Wähle die Methode, die am besten zu deinem Anwendungsfall passt. Wenn du noch Fragen hast, lass es mich wissen!








